/**
  * 
	* @author Darko Petrovic
  * @Link Facebook: https://www.facebook.com/WitchkingOfAngmarr
  * @Link GitHub: https://github.com/darkoxv88
  * 
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.


exports:

  window.ImageProcessing;

backup:

  window.___webpack_export_dp_ImageProcessing___.definition

**/

(()=>{"use strict";var r="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{};function n(){return r}class t{constructor(){}get size(){return this._size}get type(){return this._type}get orgWidth(){var r,n;return null===(n=null===(r=this.org)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.width}get orgHeight(){var r,n;return null===(n=null===(r=this.org)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.height}get ctx(){return this.active}get width(){var r,n;return null===(n=null===(r=this.active)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.width}get height(){var r,n;return null===(n=null===(r=this.active)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.height}destructor(){this.img=null,this._size=void 0,this._type=void 0,this.org=null,this.active=null}generate2dCtx(r,n){let t=document.createElement("canvas");return t.width=r,t.height=n,t.getContext("2d")}duplicateCtxOrg(){var r,n,t,e,i;let a=this.generate2dCtx(null===(n=null===(r=this.org)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.width,null===(e=null===(t=this.org)||void 0===t?void 0:t.canvas)||void 0===e?void 0:e.height);return a.drawImage(null===(i=this.org)||void 0===i?void 0:i.canvas,0,0),a}duplicateCtxActive(){var r,n,t,e,i;let a=this.generate2dCtx(null===(n=null===(r=this.active)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.width,null===(e=null===(t=this.active)||void 0===t?void 0:t.canvas)||void 0===e?void 0:e.height);return a.drawImage(null===(i=this.active)||void 0===i?void 0:i.canvas,0,0),a}loadImage(r){return new Promise(((n,t)=>{var e=new FileReader;e.onload=i=>{if("string"==typeof e.result){var a=new Image;a.onload=()=>{var t,e;this.img=a,this._size=null==r?void 0:r.size,this._type=null==r?void 0:r.type;let i=this.generate2dCtx(null===(t=this.img)||void 0===t?void 0:t.width,null===(e=this.img)||void 0===e?void 0:e.height);i.drawImage(this.img,0,0),this.org=i,this.active=this.duplicateCtxOrg(),n()},a.onerror=t,a.src=e.result}else t(i)},e.onerror=t,e.readAsDataURL(r)}))}getOrgImageUrl(){var r,n;return null===(n=null===(r=this.org)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.toDataURL("image/png")}getOrgImageData(){var r;return null===(r=this.active)||void 0===r?void 0:r.getImageData(0,0,this.orgWidth,this.orgHeight)}getActiveImageUrl(){var r,n;return null===(n=null===(r=this.active)||void 0===r?void 0:r.canvas)||void 0===n?void 0:n.toDataURL("image/png")}getActiveImageData(){var r;return null===(r=this.active)||void 0===r?void 0:r.getImageData(0,0,this.width,this.height)}putActiveImageData(r){var n;try{this.active.canvas.width=r.width,this.active.canvas.height=r.height,null===(n=this.active)||void 0===n||n.putImageData(r,0,0)}catch(r){console.error(r)}}}const e=!!WebGLRenderingContext;function i(){return e}const a=!!WebGL2RenderingContext;function o(){return a&&!0}function l(){let r=document.createElement("canvas");return r.innerHTML="This browser does not support HTML5",r}function s(r,n,t){var e=r.createShader(n);if(r.shaderSource(e,t),r.compileShader(e),!r.getShaderParameter(e,r.COMPILE_STATUS))throw r.deleteShader(e),"Could not compile shader: "+r.getShaderInfoLog(e);return e}function h(r,n,t){var e=r.createProgram();if(r.attachShader(e,n),r.attachShader(e,t),r.linkProgram(e),!r.getProgramParameter(e,r.LINK_STATUS))throw"Program failed to link: "+r.getProgramInfoLog(e);return e}function g(r,n,t,e){n&&(n.width=t,n.height=e,r.viewport(0,0,n.width,n.height),r.clearColor(1,1,1,1),r.clearDepth(1),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT))}function f(r,n,t,e,i){var a=n,o=n+e,l=t,s=t+i;r.bufferData(r.ARRAY_BUFFER,new Float32Array([a,l,o,l,a,s,a,s,o,l,o,s]),r.STATIC_DRAW)}const u={1e3:[255,56,0],1500:[255,109,0],1900:[255,131,0],2e3:[255,137,18],2200:[255,147,44],2500:[255,161,72],2700:[255,169,87],2800:[255,173,94],2900:[255,177,101],3e3:[255,180,107],3500:[255,196,137],4e3:[255,209,163],4100:[255,211,168],4300:[255,215,177],4500:[255,219,186],5e3:[255,228,206],5100:[255,230,210],5200:[255,232,213],5300:[255,233,217],5400:[255,235,220],5500:[255,236,224],5600:[255,238,227],5700:[255,239,230],6e3:[255,243,239],6500:[255,249,253],6600:[254,249,255],6700:[252,247,255],6800:[249,246,255],6900:[247,245,255],7e3:[245,243,255],7100:[243,242,255],7200:[240,241,255],7300:[239,240,255],7400:[237,239,255],7500:[235,238,255],8e3:[227,233,255],8500:[220,229,255],9e3:[214,225,255],9300:[210,223,255],9500:[208,222,255],9600:[207,221,255],9700:[207,221,255],9800:[206,220,255],9900:[205,220,255],1e4:[204,219,255],10500:[200,217,255],11e3:[200,213,255],11500:[193,213,255],12e3:[191,211,255],12500:[188,210,255],13e3:[186,208,255],13500:[184,207,255],14e3:[182,206,255],14500:[180,205,255],15e3:[179,204,255],15500:[177,203,255],16e3:[176,202,255],16500:[175,201,255],17e3:[174,200,255],17500:[173,200,255]};class _{constructor(){return this._scaleX=1,this._scaleY=1,this.flipVertical(!1),this.flipHorizontal(!1),this.invert(!1),this._hsl=new Array(3),this.hsl(0,0,0),this.gamma(1),this.noise(0),this.sepia(!1),this.grayscale(!1),this.temperature(0),this.transparency(1),this.ctx=new t,this.canvas=l(),this.renderedImageBase64="",o()?(this.gl=function(r){if(0==o())return null;r||(r=l());let n=r.getContext("webgl2",{preserveDrawingBuffer:!1});if(!n)throw new Error("Could not get context, there was an unknown error.");return n}(this.canvas),void(this.program=h(this.gl,s(this.gl,this.gl.VERTEX_SHADER,"#version 300 es\r\n\r\nin vec2 a_position;\r\nin vec2 a_texCoord;\r\n\r\nuniform vec2 u_resolution;\r\nuniform float u_flipVertical;\r\nuniform float u_flipHorizontal;\r\n\r\nout vec2 v_texCoord;\r\n\r\nvoid main() {\r\n  vec2 zeroToOne = a_position / u_resolution;\r\n  vec2 zeroToTwo = zeroToOne * 2.0;\r\n  vec2 clipSpace = zeroToTwo - 1.0;\r\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n  vec2 texCoord = vec2(a_texCoord.x, a_texCoord.y);\r\n\r\n  if (u_flipVertical == 1.0f)\r\n  {\r\n    texCoord.x = 1.0f - texCoord.x;\r\n  }\r\n\r\n  if (u_flipHorizontal == 1.0f)\r\n  {\r\n    texCoord.y = 1.0f - texCoord.y;\r\n  }\r\n\r\n  v_texCoord = texCoord;\r\n}\r\n"),s(this.gl,this.gl.FRAGMENT_SHADER,"#version 300 es\r\nprecision highp float;\r\n\r\nfloat g_goldNoise(float v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459f, v) * seed) * v);\r\n}\r\nfloat g_goldNoise(vec2 v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459f, v) * seed) * v.x);\r\n}\r\nfloat g_goldNoise(vec3 v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459f, v) * seed) * v.x);\r\n}\r\nfloat g_goldNoise(vec4 v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459f, v) * seed) * v.x);\r\n}\r\nuint g_hash(uint x) \r\n{\r\n  x += (x << 10u);\r\n  x ^= (x >>  6u);\r\n  x += (x <<  3u);\r\n  x ^= (x >> 11u);\r\n  x += (x << 15u);\r\n  return x;\r\n}\r\nuint g_hash(uvec2 v) \r\n{ \r\n  return g_hash( v.x ^ g_hash(v.y)); \r\n}\r\nuint g_hash(uvec3 v) \r\n{ \r\n  return g_hash( v.x ^ g_hash(v.y) ^ g_hash(v.z)); \r\n}\r\nuint g_hash(uvec4 v) \r\n{ \r\n  return g_hash( v.x ^ g_hash(v.y) ^ g_hash(v.z) ^ g_hash(v.w) );\r\n}\r\nfloat g_floatConstruct(uint m) \r\n{\r\n  const uint ieeeMantissa = 0x007FFFFFu;\r\n  const uint ieeeOne = 0x3F800000u; \r\n\r\n  m &= ieeeMantissa;                     \r\n  m |= ieeeOne;                          \r\n\r\n  float f = uintBitsToFloat( m );   \r\n\r\n  return f - 1.0;                       \r\n}\r\nfloat g_random(float v) \r\n{ \r\n  return g_goldNoise(v, g_floatConstruct(g_hash(floatBitsToUint(v))));\r\n}\r\nfloat g_random(vec2  v) \r\n{ \r\n  return g_goldNoise(v, g_floatConstruct(g_hash(floatBitsToUint(v))));\r\n}\r\nfloat g_random(vec3  v) \r\n{ \r\n  return g_goldNoise(v, g_floatConstruct(g_hash(floatBitsToUint(v))));\r\n}\r\nfloat g_random(vec4  v) \r\n{ \r\n  return g_goldNoise(v, g_floatConstruct(g_hash(floatBitsToUint(v))));\r\n}\r\n\r\nuniform float u_rand;\r\nuniform sampler2D u_image;\r\n\r\nuniform float u_invert;\r\nuniform vec3 u_hsl;\r\nuniform float u_gamma;\r\nuniform float u_noise;\r\nuniform float u_sepia;\r\nuniform float u_grayscale;\r\nuniform vec3 u_temperature;\r\nuniform float u_transparency;\r\n\r\nin vec2 v_texCoord;\r\nout vec4 outColor;\r\n\r\nvec3 rgbToHSL(float cR, float cG, float cB) \r\n{\r\n  float r = cR / 255.0f;\r\n  float g = cG / 255.0f;\r\n  float b = cB / 255.0f;\r\n\r\n  float max = max(max(r, g), b); \r\n  float min = min(min(r, g), b);\r\n  float del = max - min;\r\n\r\n  float h = 0.0f; \r\n  float s = 0.0f; \r\n  float l = (max + min) / 2.0f;\r\n\r\n  if (max == min) \r\n  {\r\n    return vec3(h, s, l);\r\n  }\r\n\r\n  if (l < 0.5f)  \r\n  {\r\n    s = del / (max + min);\r\n  }\r\n  else  \r\n  {\r\n    s = del / (2.0f - max - min); \r\n  }\r\n\r\n  float delR = ( ( ( max - r ) / 6.0f ) + ( del / 2.0f ) ) / del;\r\n  float delG = ( ( ( max - g ) / 6.0f ) + ( del / 2.0f ) ) / del;\r\n  float delB = ( ( ( max - b ) / 6.0f ) + ( del / 2.0f ) ) / del;\r\n\r\n  if (r == max) \r\n  {\r\n    h = delB - delG;\r\n  }\r\n  else if (g == max) \r\n  {\r\n    h = (1.0f / 3.0f) + delR - delB;\r\n  }\r\n  else if (b == max) \r\n  {\r\n    h = (2.0f / 3.0f) + delG - delR;\r\n  }\r\n\r\n  if (h < 0.0f) \r\n  {\r\n    h += 1.0f;\r\n  }\r\n\r\n  if (h > 1.0f) \r\n  {\r\n    h -= 1.0f;\r\n  }\r\n\r\n  return vec3(h, s, l);\r\n}\r\n\r\nfloat _hue_2_rgb_(float v1, float v2, float vH) \r\n{\r\n  if (vH < 0.0f) \r\n  {\r\n    vH += 1.0f;\r\n  }\r\n\r\n  if (vH > 1.0f) \r\n  {\r\n    vH -= 1.0f;\r\n  }\r\n\r\n  if ((6.0f * vH) < 1.0f) \r\n  {\r\n    return (v1 + (v2 - v1) * 6.0f * vH);\r\n  }\r\n  if ((2.0f * vH) < 1.0f)\r\n  {\r\n    return v2;\r\n  }\r\n  if ((3.0f * vH) < 2.0f)\r\n  {\r\n    return (v1 + (v2 - v1) * ((2.0f / 3.0f) - vH) * 6.0f);\r\n  }\r\n\r\n  return v1;\r\n}\r\n\r\nvec3 hslToRGB(float h, float s, float l) \r\n{\r\n  float r = 0.0f;\r\n  float g = 0.0f;\r\n  float b = 0.0f;\r\n  float val1 = 0.0f;\r\n  float val2 = 0.0f;\r\n\r\n  if (s == 0.0f)\r\n  {\r\n    r = l * 255.0f;\r\n    g = l * 255.0f;\r\n    b = l * 255.0f;\r\n\r\n    return vec3(r, g, b);\r\n  }\r\n\r\n  if (l < 0.5f) \r\n  {\r\n    val2 = l * (1.0f + s);\r\n  }\r\n  else\r\n  {\r\n    val2 = (l + s) - (l * s);\r\n  }\r\n      \r\n  val1 = 2.0f * l - val2;\r\n\r\n  r = 255.0f * _hue_2_rgb_(val1, val2, h + (1.0f / 3.0f));\r\n  g = 255.0f * _hue_2_rgb_(val1, val2, h);\r\n  b = 255.0f * _hue_2_rgb_(val1, val2, h - (1.0f / 3.0f));\r\n\r\n  return vec3(r, g, b);\r\n}\r\n\r\n\r\n\r\nvoid main() \r\n{\r\n  vec4 mainPixel = texture(u_image, v_texCoord);\r\n  float x = mainPixel.x * 255.0f;\r\n  float y = mainPixel.y * 255.0f;\r\n  float z = mainPixel.z * 255.0f;\r\n  float w = mainPixel.w;\r\n\r\n  // invert\r\n  if (u_invert == 1.0f) \r\n  {\r\n    x = 255.0f - x;\r\n    y = 255.0f - y;\r\n    z = 255.0f - z;\r\n  }\r\n\r\n  // hsl\r\n  {\r\n    float sVal = u_hsl.y;\r\n    float saturationAdd = 0.0f;\r\n\r\n    if (sVal < 0.0f) \r\n    {\r\n      sVal = (100.0f + sVal) / 100.0f;\r\n      sVal *= sVal;\r\n    } \r\n    else \r\n    {\r\n      sVal = sVal / 100.0f;\r\n    }\r\n    \r\n    if (u_hsl.y > 0.0f) \r\n    {\r\n      saturationAdd = sVal;\r\n    }\r\n\r\n    vec3 _hsl = rgbToHSL(x, y, z);\r\n    vec3 _rgb = hslToRGB(_hsl.x + u_hsl.x, _hsl.y + saturationAdd, _hsl.z);\r\n\r\n    x = _rgb.x;\r\n    y = _rgb.y;\r\n    z = _rgb.z;\r\n\r\n    if (u_hsl.y < 0.0f) \r\n    {\r\n      float luR = 0.3086;\r\n      float luG = 0.6094;\r\n      float luB = 0.0820;\r\n\r\n      x = ( ((1.0f - sVal) * luR + sVal) * x + ((1.0f - sVal) * luG) * y + ((1.0f - sVal) * luB) * z );\r\n      y = ( ((1.0f - sVal) * luR) * x + ((1.0f - sVal) * luG + sVal) * x + ((1.0f - sVal) * luB) * z );\r\n      z = ( ((1.0f - sVal) * luR) * x + ((1.0f - sVal) * luG) * y + ((1.0f - sVal) * luB + sVal) * z );\r\n    }\r\n\r\n    x = x + u_hsl.z;\r\n    y = y + u_hsl.z;\r\n    z = z + u_hsl.z;\r\n  }\r\n\r\n  // gamma\r\n  {\r\n    x = 255.0f * pow((x / 255.0f), u_gamma);\r\n    y = 255.0f * pow((y / 255.0f), u_gamma);\r\n    z = 255.0f * pow((z / 255.0f), u_gamma);\r\n  }\r\n\r\n  // noise\r\n  {\r\n    float randAdd = 2.0f + 1.8f * u_rand;\r\n    float ran = (0.5f - g_random(v_texCoord + vec2(randAdd, randAdd))) * u_noise;\r\n\r\n    x = x + ran;\r\n    y = y + ran;\r\n    z = z + ran;\r\n  }\r\n\r\n  // sepia\r\n  if (u_sepia == 1.0f) \r\n  {\r\n    float red = x;\r\n    float green = y;\r\n    float blue = z;\r\n\r\n    x = (0.393f * red) + (0.769f * green) + (0.189f * blue);\r\n    y = (0.349f * red) + (0.686f * green) + (0.168f * blue);\r\n    z = (0.272f * red) + (0.534f * green) + (0.131f * blue);\r\n  }\r\n\r\n  // grayscale\r\n  if (u_grayscale == 1.0f) \r\n  {\r\n    x = y = z = ((x + y + z) / 3.0f);\r\n  }\r\n\r\n  x = x * u_temperature.x;\r\n  y = y * u_temperature.y;\r\n  z = z * u_temperature.z;\r\n  w = w * u_transparency;\r\n\r\n  outColor = vec4(x / 255.0f, y / 255.0f, z / 255.0f, w).rgba;\r\n}\r\n")))):i()?(this.gl=function(r){if(0==i())return null;r||(r=l());let n=r.getContext("webgl",{preserveDrawingBuffer:!1});if(!n)throw new Error("Could not get context, there was an unknown error.");return n}(this.canvas),void(this.program=h(this.gl,s(this.gl,this.gl.VERTEX_SHADER,"attribute vec2 a_position;\r\nattribute vec2 a_texCoord;\r\n\r\nuniform vec2 u_resolution;\r\nuniform float u_flipVertical;\r\nuniform float u_flipHorizontal;\r\n\r\nvarying vec2 v_texCoord;\r\n\r\nvoid main() {\r\n  vec2 zeroToOne = a_position / u_resolution;\r\n  vec2 zeroToTwo = zeroToOne * 2.0;\r\n  vec2 clipSpace = zeroToTwo - 1.0;\r\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n  vec2 texCoord = vec2(a_texCoord.x, a_texCoord.y);\r\n\r\n  if (u_flipVertical == 1.0)\r\n  {\r\n    texCoord.x = 1.0 - texCoord.x;\r\n  }\r\n\r\n  if (u_flipHorizontal == 1.0)\r\n  {\r\n    texCoord.y = 1.0 - texCoord.y;\r\n  }\r\n\r\n  v_texCoord = texCoord;\r\n}\r\n"),s(this.gl,this.gl.FRAGMENT_SHADER,"precision highp float;\r\n\r\nfloat g_goldNoise(float v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459, v) * seed) * v);\r\n}\r\nfloat g_goldNoise(vec2 v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459, v) * seed) * v.x);\r\n}\r\nfloat g_goldNoise(vec3 v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459, v) * seed) * v.x);\r\n}\r\nfloat g_goldNoise(vec4 v, float seed) \r\n{\r\n  return fract(tan(distance(v * 1.61803398874989484820459, v) * seed) * v.x);\r\n}\r\n\r\nuniform float u_rand;\r\nuniform sampler2D u_image;\r\n\r\nuniform float u_invert;\r\nuniform vec3 u_hsl;\r\nuniform float u_gamma;\r\nuniform float u_noise;\r\nuniform float u_sepia;\r\nuniform float u_grayscale;\r\nuniform vec3 u_temperature;\r\nuniform float u_transparency;\r\n\r\nvarying vec2 v_texCoord;\r\n\r\nvec3 rgbToHSL(float cR, float cG, float cB) \r\n{\r\n  float r = cR / 255.0;\r\n  float g = cG / 255.0;\r\n  float b = cB / 255.0;\r\n\r\n  float max = max(max(r, g), b); \r\n  float min = min(min(r, g), b);\r\n  float del = max - min;\r\n\r\n  float h = 0.0; \r\n  float s = 0.0; \r\n  float l = (max + min) / 2.0;\r\n\r\n  if (max == min) \r\n  {\r\n    return vec3(h, s, l);\r\n  }\r\n\r\n  if (l < 0.5)  \r\n  {\r\n    s = del / (max + min);\r\n  }\r\n  else  \r\n  {\r\n    s = del / (2.0 - max - min); \r\n  }\r\n\r\n  float delR = ( ( ( max - r ) / 6.0 ) + ( del / 2.0 ) ) / del;\r\n  float delG = ( ( ( max - g ) / 6.0 ) + ( del / 2.0 ) ) / del;\r\n  float delB = ( ( ( max - b ) / 6.0 ) + ( del / 2.0 ) ) / del;\r\n\r\n  if (r == max) \r\n  {\r\n    h = delB - delG;\r\n  }\r\n  else if (g == max) \r\n  {\r\n    h = (1.0 / 3.0) + delR - delB;\r\n  }\r\n  else if (b == max) \r\n  {\r\n    h = (2.0 / 3.0) + delG - delR;\r\n  }\r\n\r\n  if (h < 0.0) \r\n  {\r\n    h += 1.0;\r\n  }\r\n\r\n  if (h > 1.0) \r\n  {\r\n    h -= 1.0;\r\n  }\r\n\r\n  return vec3(h, s, l);\r\n}\r\n\r\nfloat _hue_2_rgb_(float v1, float v2, float vH) \r\n{\r\n  if (vH < 0.0) \r\n  {\r\n    vH += 1.0;\r\n  }\r\n\r\n  if (vH > 1.0) \r\n  {\r\n    vH -= 1.0;\r\n  }\r\n\r\n  if ((6.0 * vH) < 1.0)\r\n  {\r\n    return (v1 + (v2 - v1) * 6.0 * vH);\r\n  }\r\n  if ((2.0 * vH) < 1.0)\r\n  {\r\n    return v2;\r\n  }\r\n  if ((3.0 * vH) < 2.0)\r\n  {\r\n    return (v1 + (v2 - v1) * ((2.0 / 3.0) - vH) * 6.0);\r\n  }\r\n\r\n  return v1;\r\n}\r\n\r\nvec3 hslToRGB(float h, float s, float l) {\r\n  float r = 0.0;\r\n  float g = 0.0;\r\n  float b = 0.0;\r\n  float val1 = 0.0;\r\n  float val2 = 0.0;\r\n\r\n  if (s == 0.0)\r\n  {\r\n    r = l * 255.0;\r\n    g = l * 255.0;\r\n    b = l * 255.0;\r\n\r\n    return vec3(r, g, b);\r\n  }\r\n\r\n  if (l < 0.5) \r\n  {\r\n    val2 = l * (1.0 + s);\r\n  }\r\n  else\r\n  {\r\n    val2 = (l + s) - (l * s);\r\n  }\r\n      \r\n  val1 = 2.0 * l - val2;\r\n\r\n  r = 255.0 * _hue_2_rgb_(val1, val2, h + (1.0 / 3.0));\r\n  g = 255.0 * _hue_2_rgb_(val1, val2, h);\r\n  b = 255.0 * _hue_2_rgb_(val1, val2, h - (1.0 / 3.0));\r\n\r\n  return vec3(r, g, b);\r\n}\r\n\r\n\r\n\r\nvoid main() {\r\n  vec4 mainPixel = texture2D(u_image, v_texCoord);\r\n  float x = mainPixel.x * 255.0;\r\n  float y = mainPixel.y * 255.0;\r\n  float z = mainPixel.z * 255.0;\r\n  float w = mainPixel.w;\r\n\r\n  // invert\r\n  if (u_invert == 1.0) \r\n  {\r\n    x = 255.0 - x;\r\n    y = 255.0 - y;\r\n    z = 255.0 - z;\r\n  }\r\n\r\n  // hsl\r\n  {\r\n    float sVal = u_hsl.y;\r\n    float saturationAdd = 0.0;\r\n\r\n    if (sVal < 0.0) \r\n    {\r\n      sVal = (100.0 + sVal) / 100.0;\r\n      sVal *= sVal;\r\n    } \r\n    else \r\n    {\r\n      sVal = sVal / 100.0;\r\n    }\r\n    \r\n    if (u_hsl.y > 0.0) \r\n    {\r\n      saturationAdd = sVal;\r\n    }\r\n\r\n    vec3 _hsl = rgbToHSL(x, y, z);\r\n    vec3 _rgb = hslToRGB(_hsl.x + u_hsl.x, _hsl.y + saturationAdd, _hsl.z);\r\n\r\n    x = _rgb.x;\r\n    y = _rgb.y;\r\n    z = _rgb.z;\r\n\r\n    if (u_hsl.y < 0.0) \r\n    {\r\n      float luR = 0.3086;\r\n      float luG = 0.6094;\r\n      float luB = 0.0820;\r\n\r\n      x = ( ((1.0 - sVal) * luR + sVal) * x + ((1.0 - sVal) * luG) * y + ((1.0 - sVal) * luB) * z );\r\n      y = ( ((1.0 - sVal) * luR) * x + ((1.0 - sVal) * luG + sVal) * x + ((1.0 - sVal) * luB) * z );\r\n      z = ( ((1.0 - sVal) * luR) * x + ((1.0 - sVal) * luG) * y + ((1.0 - sVal) * luB + sVal) * z );\r\n    }\r\n\r\n    x = x + u_hsl.z;\r\n    y = y + u_hsl.z;\r\n    z = z + u_hsl.z;\r\n  }\r\n\r\n  // gamma\r\n  {\r\n    x = 255.0 * pow((x / 255.0), u_gamma);\r\n    y = 255.0 * pow((y / 255.0), u_gamma);\r\n    z = 255.0 * pow((z / 255.0), u_gamma);\r\n  }\r\n\r\n  // noise\r\n  {\r\n    float randAdd = 2.0 + 1.8 * u_rand;\r\n    float ran = 0.0;\r\n\r\n    x = x + ran;\r\n    y = y + ran;\r\n    z = z + ran;\r\n  }\r\n\r\n  // sepia\r\n  if (u_sepia == 1.0) \r\n  {\r\n    float red = x;\r\n    float green = y;\r\n    float blue = z;\r\n\r\n    x = (0.393 * red) + (0.769 * green) + (0.189 * blue);\r\n    y = (0.349 * red) + (0.686 * green) + (0.168 * blue);\r\n    z = (0.272 * red) + (0.534 * green) + (0.131 * blue);\r\n  }\r\n\r\n  // grayscale\r\n  if (u_grayscale == 1.0) \r\n  {\r\n    x = y = z = ((x + y + z) / 3.0);\r\n  }\r\n\r\n  x = x * u_temperature.x;\r\n  y = y * u_temperature.y;\r\n  z = z * u_temperature.z;\r\n  w = w * u_transparency;\r\n\r\n  gl_FragColor = vec4(x / 255.0, y / 255.0, z / 255.0, w).rgba;\r\n}\r\n")))):void 0}destructor(){var r;null===(r=this.ctx)||void 0===r||r.destructor()}loadImage(r){return new Promise(((n,t)=>{this.ctx.loadImage(r).then((()=>{n()})).catch((r=>{console.error("There was an error while loading image."),t(r)}))}))}scaleX(r){"number"==typeof r&&r&&(r<.001&&(r=.001),this._scaleX=r)}scaleY(r){"number"==typeof r&&r&&(r<.001&&(r=.001),this._scaleX=r)}flipVertical(r){this._flipVertical=r?1:0}flipHorizontal(r){this._flipHorizontal=r?1:0}invert(r){this._invert=r?1:0}hsl(r,n,t){this.h(r),this.s(n),this.l(t)}h(r){for("number"!=typeof r&&(r=0),r/=180;r>1;)r-=1;for(;r<-1;)r+=1;this._hsl[0]=r}s(r){"number"!=typeof r&&(r=0),r>100&&(r=100),r<-100&&(r=-100),this._hsl[1]=r}l(r){"number"!=typeof r&&(r=0),r>100&&(r=100),r<-100&&(r=-100),r/=100,this._hsl[2]=255*r}gamma(r){"number"!=typeof r&&(r=1),r<0&&(r=0),r>1e5&&(r=1e5),this._gamma=1/r}noise(r){"number"!=typeof r&&(r=0),r=255*r*.1,this._noise=r}sepia(r){this._sepia=r?1:0}grayscale(r){this._grayscale=r?1:0}temperature(r){let n=function(r){let n=255,t=1255,e=255;return"number"==typeof r&&r?(r<0&&(r=0),0==r?[255,255,255]:u[r]?[u[r][0],u[r][1],u[r][2]]:(r>1e8&&(r=1e8),(r/=100)<=66?(n=255,t=parseFloat((99.4708025861*Math.log(r)-161.1195681661).toFixed(0))):(n=parseFloat((329.698727446*Math.pow(r-60,-.1332047592)).toFixed(0)),t=parseFloat((288.1221695283*Math.pow(r-60,-.0755148492)).toFixed(0))),e=r>=66?255:r<=19?0:parseFloat((138.5177312231*Math.log(r-10)-305.0447927307).toFixed(0)),[n,t,e])):[255,255,255]}(r);n[0]=n[0]/255,n[1]=n[1]/255,n[2]=n[2]/255,this._temperature=n}transparency(r){"number"!=typeof r&&(r=1),(r=parseFloat(r.toString()))>1&&(r=1),r<0&&(r=0),this._transparency=r}renderGl2(){return new Promise(((r,n)=>{try{if(!(this.gl instanceof WebGL2RenderingContext))return void n(new Error("Rendering contex is not WebGL2RenderingContext!"));const e=parseInt((this.ctx.orgWidth*this._scaleX).toFixed(0)),i=parseInt((this.ctx.orgHeight*this._scaleY).toFixed(0));g(this.gl,this.canvas,e,i);const a=this.gl.getAttribLocation(this.program,"a_position"),o=this.gl.getAttribLocation(this.program,"a_texCoord"),l=this.gl.getUniformLocation(this.program,"u_resolution"),s=this.gl.getUniformLocation(this.program,"u_flipVertical"),h=this.gl.getUniformLocation(this.program,"u_flipHorizontal"),u=this.gl.getUniformLocation(this.program,"u_rand"),_=this.gl.getUniformLocation(this.program,"u_image"),v=this.gl.getUniformLocation(this.program,"u_invert"),d=this.gl.getUniformLocation(this.program,"u_gamma"),c=this.gl.getUniformLocation(this.program,"u_hsl"),m=this.gl.getUniformLocation(this.program,"u_noise"),x=this.gl.getUniformLocation(this.program,"u_sepia"),p=this.gl.getUniformLocation(this.program,"u_grayscale"),y=this.gl.getUniformLocation(this.program,"u_temperature"),R=this.gl.getUniformLocation(this.program,"u_transparency"),T=this.gl.createVertexArray();this.gl.bindVertexArray(T);let b=this.gl.createBuffer();this.gl.enableVertexAttribArray(a),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,b),this.gl.vertexAttribPointer(a,2,this.gl.FLOAT,!1,0,0);var t=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),this.gl.STATIC_DRAW),this.gl.enableVertexAttribArray(o),this.gl.vertexAttribPointer(o,2,this.gl.FLOAT,!1,0,0);const A=this.gl.createTexture();this.gl.activeTexture(this.gl.TEXTURE0+0),this.gl.bindTexture(this.gl.TEXTURE_2D,A),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.ctx.getOrgImageData()),this.gl.useProgram(this.program),this.gl.bindVertexArray(T),this.gl.uniform2f(l,e,i),this.gl.uniform1f(u,Math.random()),this.gl.uniform1i(_,0),this.gl.uniform1f(s,this._flipVertical),this.gl.uniform1f(h,this._flipHorizontal),this.gl.uniform1f(v,this._invert),this.gl.uniform3fv(c,this._hsl),this.gl.uniform1f(d,this._gamma),this.gl.uniform1f(m,this._noise),this.gl.uniform1f(x,this._sepia),this.gl.uniform1f(p,this._grayscale),this.gl.uniform3fv(y,this._temperature),this.gl.uniform1f(R,this._transparency),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,b),f(this.gl,0,0,e,i),this.gl.drawArrays(this.gl.TRIANGLES,0,6),this.renderedImageBase64=this.canvas.toDataURL("image/png"),r()}catch(r){n(r)}}))}renderGl1(){return new Promise(((r,n)=>{try{if(!(this.gl instanceof WebGLRenderingContext))return void n(new Error("Rendering contex is not WebGLRenderingContext!"));const t=parseInt((this.ctx.orgWidth*this._scaleX).toFixed(0)),e=parseInt((this.ctx.orgHeight*this._scaleY).toFixed(0));g(this.gl,this.canvas,t,e);const i=this.gl.getAttribLocation(this.program,"a_position"),a=this.gl.getAttribLocation(this.program,"a_texCoord"),o=this.gl.getUniformLocation(this.program,"u_resolution"),l=this.gl.getUniformLocation(this.program,"u_flipVertical"),s=this.gl.getUniformLocation(this.program,"u_flipHorizontal"),h=this.gl.getUniformLocation(this.program,"u_rand"),u=this.gl.getUniformLocation(this.program,"u_image"),_=this.gl.getUniformLocation(this.program,"u_invert"),v=this.gl.getUniformLocation(this.program,"u_gamma"),d=this.gl.getUniformLocation(this.program,"u_hsl"),c=this.gl.getUniformLocation(this.program,"u_noise"),m=this.gl.getUniformLocation(this.program,"u_sepia"),x=this.gl.getUniformLocation(this.program,"u_grayscale"),p=this.gl.getUniformLocation(this.program,"u_temperature"),y=this.gl.getUniformLocation(this.program,"u_transparency");let R=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,R),f(this.gl,0,0,t,e);let T=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,T),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),this.gl.STATIC_DRAW);let b=this.gl.createTexture();this.gl.bindTexture(this.gl.TEXTURE_2D,b),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.ctx.getOrgImageData()),this.gl.useProgram(this.program),this.gl.enableVertexAttribArray(i),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,R),this.gl.vertexAttribPointer(i,2,this.gl.FLOAT,!1,0,0),this.gl.enableVertexAttribArray(a),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,T),this.gl.vertexAttribPointer(a,2,this.gl.FLOAT,!1,0,0),this.gl.uniform2f(o,t,e),this.gl.uniform1f(h,Math.random()),this.gl.uniform1i(u,0),this.gl.uniform1f(l,this._flipVertical),this.gl.uniform1f(s,this._flipHorizontal),this.gl.uniform1f(l,this._flipVertical),this.gl.uniform1f(s,this._flipHorizontal),this.gl.uniform1f(_,this._invert),this.gl.uniform3fv(d,this._hsl),this.gl.uniform1f(v,this._gamma),this.gl.uniform1f(c,this._noise),this.gl.uniform1f(m,this._sepia),this.gl.uniform1f(x,this._grayscale),this.gl.uniform3fv(p,this._temperature),this.gl.uniform1f(y,this._transparency),this.gl.drawArrays(this.gl.TRIANGLES,0,6),this.renderedImageBase64=this.canvas.toDataURL("image/png"),r()}catch(r){n(r)}}))}render(){return this.ctx.putActiveImageData(this.ctx.getOrgImageData()),o()?this.renderGl2():i()?this.renderGl1():void 0}getImage(){return this.renderedImageBase64}}_.Canvas2dCtx=t;const v=_;var d="ImageProcessing";try{if(n()[d])throw new Error('window["'+d+'"] is already in use! Switching to: window["___webpack_export_'+d+'___"].definition');n()[d]=v}catch(r){console.error(r),"object"==typeof n()["___webpack_export_dp_"+d+"___"]&&n()["___webpack_export_dp_"+d+"___"]||(n()["___webpack_export_dp_"+d+"___"]={}),n()["___webpack_export_dp_"+d+"___"].definition=v}})();